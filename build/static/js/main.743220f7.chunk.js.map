{"version":3,"sources":["store/actions.js","store/sagas/ApiErrors.js","store/sagas/index.js","store/reducers/Weather.js","store/reducers/Dashboard.js","components/Chip.js","components/Weather.js","components/Header.js","components/Wrapper.js","components/MultipleSelect.js","components/Chart.js","components/Dashboard.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","regenerator_default","a","wrap","_context","prev","next","call","toast","error","concat","stop","_marked","_context2","takeEvery","actions","_marked2","ApiErrors","sagas","Object","toConsumableArray","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","handlers","defineProperty","state","c","getWeatherForLocation","reducers_Weather","arguments","length","undefined","handler","type","metrics","measurements","_handlers","getMetrics","objectSpread","getMultipleMeasurements","reducers_Dashboard","withStyles","theme","root","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","_state$weather","weather","components_Weather","react_default","createElement","urql_es","value","Weather_Weather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","_useSelector","useSelector","_useQuery","useQuery","query","variables","result","slicedToArray","fetching","data","useEffect","message","LinearProgress","components_Chip","useStyles","makeStyles","grow","flexGrow","Header","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","_ref","children","display","flexWrap","formControl","margin","spacing","minWidth","maxWidth","chips","chip","noLabel","marginTop","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","name","personName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MultipleSelect","props","useTheme","_React$useState","React","useState","_React$useState2","setPersonName","FormControl","InputLabel","htmlFor","Select","multiple","onChange","event","target","onSelectChange","input","Input","id","renderValue","selected","map","key","names","MenuItem","randomColor","Math","random","toString","substr","Chart","mergedObjects","_","forEach","item","index","mergedItem","_objectSpread2","metric","moment","at","format","push","finalData","sortBy","filter","m","es6","top","right","left","bottom","strokeDasharray","dataKey","d","i","yAxisId","dot","stroke","card","dashboard","getMeasurements","components_Dashboard","Dashboard_Dashboard","Dashboard","selectedMetrics","setSelectedMetrics","_useQuery3","result2","Card","CardContent","s","dt","Date","setMinutes","getMinutes","metricName","after","getTime","store","rootReducer","combineReducers","weatherReducer","DashboardReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","createMuiTheme","useNextVariants","App","MuiThemeProvider","CssBaseline","es","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.743220f7.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\nexport const METRICS_DATA_RECEIVED = \"METRICS_DATA_RECEIVED\";\nexport const MEASUREMENTS_DATA_RECEIVED = \"MEASUREMENTS_DATA_RECEIVED\";\n","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n  yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];\n","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];\n","import * as actions from \"../actions\";\n\nconst initialState = {\n  temperatureinCelsius: null,\n  temperatureinFahrenheit: null,\n  description: \"\",\n  locationName: \"\"\n};\n\nconst toF = c => (c * 9) / 5 + 32;\n\nconst weatherDataRecevied = (state, action) => {\n  const { getWeatherForLocation } = action;\n  const {\n    description,\n    locationName,\n    temperatureinCelsius\n  } = getWeatherForLocation;\n\n  return {\n    temperatureinCelsius,\n    temperatureinFahrenheit: toF(temperatureinCelsius),\n    description,\n    locationName\n  };\n};\n\nconst handlers = {\n  [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied\n};\n\nexport default (state = initialState, action) => {\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};\n","import * as actions from \"../actions\";\n\nconst initialState = {\n  metrics: [],\n  measurements: []\n};\n\nconst metricsDataReceived = (state, action) => {\n  const { getMetrics } = action;\n\n  return {\n    ...state,\n    metrics: getMetrics\n  };\n};\n\nconst measurementsDataReceived = (state, action) => {\n  const { getMultipleMeasurements } = action;\n  return {\n    ...state,\n    measurements: getMultipleMeasurements\n  };\n};\n\nconst handlers = {\n  [actions.METRICS_DATA_RECEIVED]: metricsDataReceived,\n  [actions.MEASUREMENTS_DATA_RECEIVED]: measurementsDataReceived\n};\n\nexport default (state = initialState, action) => {\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};\n","import Chip from \"@material-ui/core/Chip\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst cardStyles = theme => ({\n  root: {\n    background: theme.palette.secondary.main\n  },\n  label: {\n    color: theme.palette.primary.main\n  }\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { useGeolocation } from \"react-use\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Chip from \"./Chip\";\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\"\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = state => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(\n    getWeather\n  );\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong\n    }\n  });\n  const { fetching, data, error } = result;\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n      const { getWeatherForLocation } = data;\n      dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation });\n    },\n    [dispatch, data, error]\n  );\n\n  if (fetching) return <LinearProgress />;\n\n  return (\n    <Chip\n      label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`}\n    />\n  );\n};\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Weather from \"./Weather\";\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1\n  }\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"Nikunj's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    background: theme.palette.background.main,\n    height: \"100vh\"\n  }\n}));\n\nexport default ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n","import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 800,\n    maxWidth: 800\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 2\n  },\n  noLabel: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium\n  };\n}\n\nexport default function MultipleSelect(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [personName, setPersonName] = React.useState([]);\n\n  function handleChange(event) {\n    setPersonName(event.target.value);\n    props.onSelectChange(event.target.value);\n  }\n\n  return (\n    <div className={classes.root}>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"select-multiple-chip\">Select</InputLabel>\n        <Select\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<Input id=\"select-multiple-chip\" />}\n          renderValue={selected => (\n            <div className={classes.chips}>\n              {selected.map(value => (\n                <Chip key={value} label={value} className={classes.chip} />\n              ))}\n            </div>\n          )}\n          MenuProps={MenuProps}\n        >\n          {props.names.map(name => (\n            <MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, personName, theme)}\n            >\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst randomColor = () =>\n  `#${(0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6)}`;\n\nexport default function Chart(props) {\n  const mergedObjects = [];\n\n  if (!props.measurements || !props.measurements.length)\n    return <div>Select metric to load chart data</div>;\n\n  _.forEach(props.measurements[0].measurements, function(item, index) {\n    const measurements = _.map(props.measurements, \"measurements\");\n\n    let mergedItem = {};\n\n    _.forEach(measurements, function(value) {\n      mergedItem = {\n        ...mergedItem,\n        ...value[index],\n        [value[index].metric]: value[index].value,\n        atValue: moment(value[index].at).format(\"LT\")\n      };\n    });\n\n    mergedObjects.push(mergedItem);\n  });\n\n  const finalData = _.sortBy(mergedObjects, [\"at\"]).filter(m => m.value >= 0);\n\n  return (\n    <LineChart\n      width={1024}\n      height={500}\n      data={finalData}\n      margin={{\n        top: 50,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"atValue\" />\n      {props.measurements.map((d, i) => (\n        <YAxis yAxisId={i} key={i} />\n      ))}\n      <Tooltip />\n      <Legend />\n      {props.measurements.map((d, i) => (\n        <Line\n          yAxisId={i}\n          key={i}\n          type=\"monotone\"\n          dataKey={d.metric}\n          dot={false}\n          stroke={randomColor()}\n        />\n      ))}\n    </LineChart>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions\";\nimport { Provider, createClient, useQuery } from \"urql\";\n// import { useGeolocation } from \"react-use\";\n// import LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MultipleSelect from \"./MultipleSelect\";\nimport Chart from \"./Chart\";\n\nconst useStyles = makeStyles({\n  card: {\n    margin: \"1%\"\n  }\n});\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\"\n});\n\nconst fetMetricsQuery = `\n{\n  getMetrics\n}\n`;\n\nconst fetchData = `\nquery($input: [MeasurementQuery]) {\n  getMultipleMeasurements(input: $input)  {\n    metric,\n    measurements{\n      at,\n      value,\n      metric,\n      unit\n    }\n  }\n}\n`;\n\nconst getMetrics = state => {\n  const { metrics } = state.dashboard;\n  return {\n    metrics\n  };\n};\n\nconst getMeasurements = state => {\n  const { measurements } = state.dashboard;\n  return {\n    measurements\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Dashboard />\n    </Provider>\n  );\n};\n\nconst Dashboard = () => {\n  const classes = useStyles();\n\n  const [selectedMetrics, setSelectedMetrics] = React.useState([]);\n\n  const dispatch = useDispatch();\n  const { metrics } = useSelector(getMetrics);\n  const { measurements } = useSelector(getMeasurements);\n\n  const onSelectChange = value => {\n    var input =\n      value && value.length\n        ? value.map(s => {\n            var dt = new Date();\n            dt.setMinutes(dt.getMinutes() - 30); // take last 30 Minutes data\n            return {\n              metricName: s,\n              after: dt.getTime()\n            };\n          })\n        : [];\n    setSelectedMetrics(input);\n  };\n\n  const [result] = useQuery({\n    query: fetMetricsQuery,\n    variables: {}\n  });\n  const { fetching, data, error } = result;\n\n  const [result2] = useQuery({\n    query: fetchData,\n    variables: {\n      input: selectedMetrics\n    }\n  });\n\n  useEffect(() => {\n    if (error) {\n      dispatch({ type: actions.API_ERROR, error: error.message });\n      return;\n    }\n    if (!data) return;\n    const { getMetrics } = data;\n    dispatch({ type: actions.METRICS_DATA_RECEIVED, getMetrics });\n  }, [dispatch, data, error]);\n\n  useEffect(() => {\n    if (result2.error) {\n      dispatch({ type: actions.API_ERROR, error: result2.error.message });\n      return;\n    }\n    if (!result2.data) return;\n    const { getMultipleMeasurements } = result2.data;\n    dispatch({\n      type: actions.MEASUREMENTS_DATA_RECEIVED,\n      getMultipleMeasurements\n    });\n  }, [result2]);\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <MultipleSelect names={metrics} onSelectChange={onSelectChange} />\n        <Chart measurements={measurements} />\n      </CardContent>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport createStore from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\n// import NowWhat from \"./components/NowWhat\";\nimport Dashboard from \"./components/Dashboard\";\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: \"rgb(39,49,66)\"\n    },\n    secondary: {\n      main: \"rgb(197,208,222)\"\n    },\n    background: {\n      main: \"rgb(226,231,238)\"\n    }\n  }\n});\n\nconst App = props => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <Dashboard />\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"./sagas\";\nimport weatherReducer from \"./reducers/Weather\";\nimport DashboardReducer from \"./reducers/Dashboard\";\n\nexport default () => {\n  const rootReducer = combineReducers({\n    weather: weatherReducer,\n    dashboard: DashboardReducer\n  });\n\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n\n  sagas.forEach(sagaMiddleware.run);\n\n  return store;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}